@use 'true' as *; // sass-true
@use './use-transition.scss' as *;
@use 'sass:meta';
@use 'sass:list';
@use '../../functions/list/list-remove/list-remove.scss' as *;

@mixin transition($properties...) {
	$duration: .3s;

	@for $i from 1 through list.length($properties) {
		$prop: list.nth($properties, $i);

		@if (meta.type-of($prop) == 'number') {
			$duration: $prop;
			$properties: list-remove($properties, $i);
		}
	}

	@include use-transition($properties: $properties, $duration: $duration);
}

@include describe('Mixins') {
	@include describe('use-transition') {
		@include it('Outputs the correct content using single property') {
			@include assert {
				@include output {
					@include use-transition(opacity);
				}

				@include expect {
					transition-property: opacity;
				}
			}
		}

		@include it('Outputs the correct content using single quoted property') {
			@include assert {
				@include output {
					@include use-transition('opacity');
				}

				@include expect {
					transition-property: opacity;
				}
			}
		}

		@include it('Outputs the correct content using multiple properties') {
			@include assert {
				@include output {
					@include use-transition(opacity transform);
				}

				@include expect {
					transition-property: opacity, transform;
				}
			}
		}

		@include it('Outputs the correct content using multiple properties separated by comma') {
			@include assert {
				@include output {
					@include use-transition($properties: (opacity, transform));
				}

				@include expect {
					transition-property: opacity, transform;
				}
			}
		}

		@include it('Outputs the correct content using multiple quoted properties') {
			@include assert {
				@include output {
					@include use-transition('opacity transform');
				}

				@include expect {
					transition-property: opacity, transform;
				}
			}
		}

		@include it('Can customize the `$duration` argument') {
			@include assert {
				@include output {
					@include use-transition(opacity transform, $duration: .2s);
				}

				@include expect {
					transition-property: opacity, transform;
					transition-duration: .2s;
				}
			}
		}

		@include it('Can customize the `$duration` argument using string') {
			@include assert {
				@include output {
					@include use-transition(opacity transform, $duration: '.2s');
				}

				@include expect {
					transition-property: opacity, transform;
					transition-duration: .2s;
				}
			}
		}

		@include it('Can customize the `$delay` argument') {
			@include assert {
				@include output {
					@include use-transition(opacity transform, $delay: .2s);
				}

				@include expect {
					transition-property: opacity, transform;
					transition-delay: .2s;
				}
			}
		}

		@include it('Can customize the `$delay` argument using string') {
			@include assert {
				@include output {
					@include use-transition(opacity transform, $delay: '.2s');
				}

				@include expect {
					transition-property: opacity, transform;
					transition-delay: .2s;
				}
			}
		}

		@include it('Can customize the `$timing-function` argument') {
			@include assert {
				@include output {
					@include use-transition(opacity transform, $timing-function: ease-in-out);
				}

				@include expect {
					transition-property: opacity, transform;
					transition-timing-function: ease-in-out;
				}
			}
		}

		@include it('Can customize the `$timing-function` argument using string') {
			@include assert {
				@include output {
					@include use-transition(opacity transform, $timing-function: 'ease-in-out');
				}

				@include expect {
					transition-property: opacity, transform;
					transition-timing-function: ease-in-out;
				}
			}
		}

		@include it('Correctly works as high order mixin with variable arguments length') {
			@include assert {
				@include output {
					@include transition(opacity, transform);
				}

				@include expect {
					transition-property: opacity, transform;
					transition-duration: .3s;
				}
			}
		}

		@include it('Correctly works as high order mixin with variable arguments length using space as separator') {
			@include assert {
				@include output {
					@include transition(opacity transform);
				}

				@include expect {
					transition-property: opacity, transform;
					transition-duration: .3s;
				}
			}
		}

		@include it('Correctly works as high order mixin with variable arguments length using custom `$duration`') {
			@include assert {
				@include output {
					@include transition(opacity, transform, .2s);
				}

				@include expect {
					transition-property: opacity, transform;
					transition-duration: .2s;
				}
			}
		}

		@include it('Correctly works as high order mixin with variable arguments length using custom `$duration` and space-separated properties') {
			@include assert {
				@include output {
					@include transition(opacity transform, .2s);
				}

				@include expect {
					transition-property: opacity, transform;
					transition-duration: .2s;
				}
			}
		}
	}
}
