/* stylelint-disable selector-max-class */
@use 'true' as *; // sass-true
@use './bem-modifiers.scss' as *;

@include describe('Mixins') {
	@include describe('bem-modifiers') {
		@include it('Works correctly with blocks') {
			@include assert {
				@include output {
					@at-root {
						.single {
							@include bem-modifiers('--modifier-one') {
								color: #ff0000;
							}
						}

						.multiple {
							@include bem-modifiers('--modifier-one', '--modifier-two') {
								color: #ff0000;
							}
						}
					}
				}

				@include expect {
					@at-root {
						.single--modifier-one {
							color: #ff0000;
						}

						.multiple--modifier-one.multiple--modifier-two {
							color: #ff0000;
						}
					}
				}
			}
		}

		@include it('Works correctly with elements') {
			@include assert {
				@include output {
					@at-root {
						.block {
							&__single {
								@include bem-modifiers('--modifier-one') {
									color: #ff0000;
								}
							}

							&__multiple {
								@include bem-modifiers('--modifier-one', '--modifier-two') {
									color: #ff0000;
								}
							}
						}
					}
				}

				@include expect {
					@at-root {
						.block__single--modifier-one {
							color: #ff0000;
						}

						.block__multiple--modifier-one.block__multiple--modifier-two {
							color: #ff0000;
						}
					}
				}
			}
		}

		@include it('Works correctly with already modified blocks') {
			@include assert {
				@include output {
					@at-root {
						.block {
							&--single {
								@include bem-modifiers('--modifier-one') {
									color: #ff0000;
								}
							}

							&--multiple {
								@include bem-modifiers('--modifier-one', '--modifier-two') {
									color: #ff0000;
								}
							}
						}
					}
				}

				@include expect {
					@at-root {
						.block--single.block--modifier-one {
							color: #ff0000;
						}

						.block--multiple.block--modifier-one.block--modifier-two {
							color: #ff0000;
						}
					}
				}
			}
		}

		@include it('Works correctly with already modified elements') {
			@include assert {
				@include output {
					@at-root {
						.block {
							&__element {
								&--single {
									@include bem-modifiers('--modifier-one') {
										color: #ff0000;
									}
								}

								&--multiple {
									@include bem-modifiers('--modifier-one', '--modifier-two') {
										color: #ff0000;
									}
								}
							}
						}
					}
				}

				@include expect {
					@at-root {
						.block__element--single.block__element--modifier-one {
							color: #ff0000;
						}

						.block__element--multiple.block__element--modifier-one.block__element--modifier-two {
							color: #ff0000;
						}
					}
				}
			}
		}

		@include it('Works correctly with nested blocks') {
			@include assert {
				@include output {
					@at-root {
						.block {
							& &__single {
								@include bem-modifiers('--modifier-one') {
									color: #ff0000;
								}
							}

							& &__multiple {
								@include bem-modifiers('--modifier-one', '--modifier-two') {
									color: #ff0000;
								}
							}
						}
					}
				}

				@include expect {
					@at-root {
						.block .block__single--modifier-one {
							color: #ff0000;
						}

						.block .block__multiple--modifier-one.block__multiple--modifier-two {
							color: #ff0000;
						}
					}
				}
			}
		}

		@include it('Works correctly with multiple selectors') {
			@include assert {
				@include output {
					@at-root {
						.block, .another {
							@include bem-modifiers('--modifier') {
								color: #ff0000;
							}
						}
					}
				}

				@include expect {
					@at-root {
						.block--modifier {
							color: #ff0000;
						}

						.another--modifier {
							color: #ff0000;
						}
					}
				}
			}
		}
	}
}
